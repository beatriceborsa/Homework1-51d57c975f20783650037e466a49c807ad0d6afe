openapi: 3.0.3
info:
  title: Wasa Photo
  description: This OpenAPI document describes the simplified login API.
  version: '1'
  termsOfService: http://swagger.io/terms/
  contact:
    email: bborsa15@outlook.it
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
externalDocs:
  description: Find out more about Swagger
  url: https://github.com/beatricebo
servers:
  - url: https://wasainsta.swagger.io/api/v3
paths:
  /login:
    post:
      tags:
        - Login
      summary: Logs in the user
      description: If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/login"
        required: true
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  identifier:
                    type: integer
                    example: 012345
      security:
         - bearerAuth: []          
  /user/{username}/setusername:
   parameters:
    - $ref: "#/components/parameters/username"
      put:
        tags:
          - User
        summary: Set the new name
        description: this method allows to set a new name to the database
        operationId: setMyUserName
        requestBody:
          description: Create or change a new name
          content:
           application/json:
             schema:
              $ref: '#/components/schemas/user'
        responses:
          default:
            description: successful operation   
        security:
         - bearerAuth: []  
         
  /users/{username}/follow/{followid}:
    parameters:
       - $ref: "#/components/parameters/username"
       - $ref: "#/components/parameters/followid"
    put:
        tags: 
          - User
        summary: Follow another user 
        description: this method allows to follow a user of your choice
        operationId: followUser
        requestBody:
          description: Add a new follow
          content:
           application/json:
             schema:
              $ref: '#/components/schemas/user'
        responses:
         '200':
          description: successful operation
          content:
            application/json:
              schema:
               $ref: '#/components/schemas/user'   
         '404':
          description: User not follow
        security:
         - bearerAuth: []      
    delete:
        tags:
         - User
        summary: Delete follow
        description: this method allows to delete a follows to the database
        operationId: unfollowUser
        responses:
          '400':
           description: Invalid ID supplied
          '404':
           description: User not unfollow
        security:
         - bearerAuth: []         

  /users/{username}/ban/{banid}:
   parameters:
         - $ref : "#/components/parameters/username"
         - $ref : "#/components/parameters/banid"
   put:
        tags: 
          - User
        summary: Ban a user 
        description: this method allows to ban a user of your choice
        operationId: banUser
        requestBody:
          description: Ban a user 
          content:
           application/json:
             schema:
              $ref: '#/components/schemas/user'
        responses:
         '200':
          description: successful operation
          content:
            application/json:
              schema:
               $ref: '#/components/schemas/user'   
         '404':
          description: User not ban
        security:
         - bearerAuth: []       
   delete:
        tags:
         - User
        summary: Delete ban
        description: This method allows to delete a follows to the database
        operationId: unbanUser
        responses:
          '400':
           description: Invalid ID supplied
          '404':
           description: User not unbanned
        security:
         - bearerAuth: []    
             
  /users/{username}/userprofile:
   parameters:
     - $ref: "#/components/parameters/username"
   get:
         tags:
           - User
         summary: Get user profile by Username
         description: This method allows to obtain the user profile 
         operationId: getUserProfile
         responses:
           '200': 
             description: successful operation
             content:
              application/json:
                schema:
                  $ref: '#/components/schemas/user'
           '400':
             description: Invalid Username supplied
           '404':
             description: User not found
         security:
          - bearerAuth: []      
  /users/{username}/photo/{phid}: 
   parameters:
     - $ref : "#/components/parameters/username"
     - $ref : "#/components/parameters/phid"
   put:
      tags:
        - Photo
      summary: Uploads an image
      description: You can upload an image to your profile
      operationId: uploadPhoto
      requestBody:
        description: photo
        required: true
        content:
          image/*:
            schema:
              description: Image
              type: object
              properties:
                 file: 
                  description: file
                  type: string
                  format: binary
                  minLength: 0
                  maxLength: 9999 
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/photo'
      security:
         - bearerAuth: []    
   delete:
      tags:
        - Photo
      summary: Delete photo by ID
      description: You can delete a photo
      operationId: deletePhoto
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Photo not found
      security:
         - bearerAuth: []    
         
  /users/{username}/photo/{phid}/like/{likeid}:    
   parameters:
        - $ref: "#/components/parameters/username"
        - $ref : "#/components/parameters/phid"
        - $ref : "#/components/parameters/likeid"
   put:
      tags:
        - Photo
      summary: Put a like 
      description: You can like a photo
      operationId: likePhoto
      requestBody:
        description: That photo was liked
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/photo'
      responses:
        default:
          description: successful operation
      security:
         - bearerAuth: []    
   delete:
      tags:
        - Photo
      summary: Unlike a photo
      description: You can unlike a photo
      operationId: unlikePhoto
     
      responses:
        '400':
          description: Invalid photo supplied
        '404':
          description: Photo not found
      security:
         - bearerAuth: []     

  /users/{username}/photo/{phid}/comment/{commentid}:
   parameters:
       - $ref: "#/components/parameters/username"
       - $ref: "#/components/parameters/phid"
       - $ref: "#/components/parameters/commentid"
   put:
      tags:
        - Photo
      summary: Leave a comment under a photo
      description: Place a new conment under a photo
      operationId: commentPhoto
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/comment'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/commentsList'
        '405':
          description: Invalid input
      security:
         - bearerAuth: []  
         
   delete:
      tags:
        - Photo
      summary: Delete a comment by id comment
      description: You can delete a comment if you want
      operationId: uncommentPhoto   
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Comment not found
      security:
         - bearerAuth: []    
         
  /user/{username}/phuser:
   parameters: 
     - $ref : "#/components/parameters/username"
   get:
      tags:
        - Photo
      summary: Returns user photo by username
      description: Returns a map of photos
      operationId: getUserPhotos
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
         - bearerAuth: []  

  /user/{username}/streamuser:
   parameters: 
       - $ref: "#/components/parameters/username"
   get:
      tags:
        - Photo
      summary: Returns stream by username
      description: Returns a map of photos
      operationId: getMyStream
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
         - bearerAuth: []    

  /user/{username}/userban:
   parameters: 
       - $ref: "#/components/parameters/username"
   get:
      tags:
        - User
      summary: Returns ban
      description: Returns an user ban
      operationId: getBans
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
         - bearerAuth: []                    
  /user/{username}/userfollow:
   parameters: 
       - $ref: "#/components/parameters/username"
   get:
      tags:
        - User
      summary: Returns sfollow
      description: Returns an user follow
      operationId: getFollowers
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
         - bearerAuth: []

  /users/{username}/photo/{phid}/like:
   parameters: 
         - $ref: "#/components/parameters/username"
         - $ref : "#/components/parameters/phid"
   get:
      tags:
        - Photo
      summary: Returns a like
      description: Returns a like from photo.
      operationId: getLikes
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
         - bearerAuth: []                  
  /users/{username}/photo/{phid}/comment:
   parameters: 
       - $ref: "#/components/parameters/username"
       - $ref: "#/components/parameters/phid"
   get:
      tags:
        - Photo
      summary: Returns a comment
      description: Returns a comment from photo.
      operationId: getComments
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
         - bearerAuth: []

tags:
  - name: "Login"
    description: "Endpoints for Login"
  - name: "User"
    description: "Endpoints for User"
  - name: "Photo"
    description: "Endpoints for Photo"
  - name: "Ban"
    description: "Endpoints for ban"
  - name: "Follow"
    description: "Endpoints for follow"
  - name: "Like"
    description: "Endpoints for like"
  - name: "Comment"
    description: "Endpoints for comment"         

components:
   securitySchemes:
     bearerAuth:             
       type: http
       scheme: bearer
       bearerFormat: JWT

   parameters:
   
    username:
      schema:
          description: username
          type: string
          pattern: '^.*?$'
          example: bea
          minLength: 5
          maxLength: 30
      name: username
      in: path
      required: true
      description: "username of user."
    
    phid:
      schema:
        description: photo id .
        type: string
        pattern: '^.*?$'
        example: "123"
        minLength: 3
        maxLength: 16
      name: phid 
      in: path
      required: true
      description: "photo of user"
    
    commentid:
      schema:
        description: commentiD 
        type: string
        pattern: '^.*?$'
        example: "#C1234"
        minLength: 3
        maxLength: 16
      name: commentid
      in: path
      required: true
      description: "comment of photo"

    likeid:
      schema:
        description: likeiD 
        type: string
        pattern: '^.*?$'
        example: "#L1234"
        minLength: 3
        maxLength: 16
      name: likeid
      in: path
      required: true
      description: "like of photo"

    followid:
      schema:
        description: followid
        type: string
        pattern: '^.*?$'
        example: "#F1234"
        minLength: 3
        maxLength: 16
      name: followid
      in: path
      required: true
      description: "follow of user"

    banid:
      schema:
        description: banid 
        type: string
        pattern: '^.*?$'
        example: "#B1234"
        minLength: 3
        maxLength: 16
      name: banid
      in: path
      required: true
      description: "ban of user"  
       
   schemas:
   
    user:
      title: User 
      description: User schema.
      type: object
      properties:
        identifier:
          description: Unique user identifier.
          type: string
          pattern: '^.*?$'
          example: "#U1234"
          minLength: 3
          maxLength: 16
        username:
          description: User username.
          type: string
          pattern: '^.*?$'
          example: bea
          minLength: 3
          maxLength: 16
  
    profile:
      title: Profile
      description: Profile schema.
      type: object
      properties:
        requestid:
          description: Unique user identifier.
          type: string
          pattern: '^.*?$'
          example: "#U1234"
          minLength: 3
          maxLength: 16
        identifier:
          description: Unique user identifier.
          type: string
          pattern: '^.*?$'
          example: "#U1234"
          minLength: 3
          maxLength: 16
        username:
          description: User username.
          type: string
          pattern: '^.*?$'
          example: bea
          minLength: 3
          maxLength: 16
        followersCount:
          description: Number of followers.
          type: integer
          example: 0
          minimum: 0
          maximum: 9999
        followingsCount:
          description: Number of followings.
          type: integer
          example: 0
          minimum: 0
          maximum: 9999
        photoCount:
          description: Number of photos.
          type: integer
          example: 0
          minimum: 0
          maximum: 9999
        followStatus:
          description: User follow status.
          type: boolean
          example: false
        banStatus:
          description: User ban status.
          type: boolean
          example: false
        checkIfBanned:
          description: Check if user is banned.
          type: boolean
          example: false
    
    ban:
      title: Ban 
      description: Ban schema.
      type: object
      properties:
        banId:
          description: banID schema.
          type: string
          pattern: '^.*?$'
          example: "#B1234"
          minLength: 3
          maxLength: 16
        bannedId:
          description: Unique user identifier.
          type: string
          pattern: '^.*?$'
          example: "#U1234"
          minLength: 3
          maxLength: 16
        userId:
          description: Unique user identifier.
          type: string
          pattern: '^.*?$'
          example: "#U1234"
          minLength: 3
          maxLength: 16
    
    follow:
      title: Follow 
      description: Follow schema.
      type: object
      properties:
        followId:
          description: followID schema.
          type: string
          pattern: '^.*?$'
          example: "#F1234"
          minLength: 3
          maxLength: 16
        followedId:
          description: Unique user identifier.
          type: string
          pattern: '^.*?$'
          example: "#U1234"
          minLength: 3
          maxLength: 16
        userId:
          description: Unique user identifier.
          type: string
          pattern: '^.*?$'
          example: "#U1234"
          minLength: 3
          maxLength: 16
  
    commentsList: 
      title: Comments
      description: Comments schema.
      type: object
      properties:
        requestId:
          description: Unique user identifier.
          type: string
          pattern: '^.*?$'
          example: "#U1234"
          minLength: 3
          maxLength: 16
        photoId: 
          description:  Unique photo identifier.
          type: string
          pattern: '^.*?$'
          example: "#P1234"
          minLength: 3
          maxLength: 16
        photoOwner:
          description: Unique user identifier.
          type: string
          pattern: '^.*?$'
          example: "#U1234"
          minLength: 3
          maxLength: 16
        comments: 
          description: list of objects (each object is a comment).
          type: array
          minItems: 0
          maxItems: 99999
          items:
            type: object
            properties:
              id:
                description: Unique comment identifier.
                type: string
                pattern: '^.*?$'
                example: "#C1234"
                minLength: 3
                maxLength: 16
              userId:
                description: Unique user identifier.
                type: string
                pattern: '^.*?$'
                example: "#U5678" 
                minLength: 3
                maxLength: 16
              photoId: 
                description:  Unique photo identifier.
                type: string
                pattern: '^.*?$'
                example: "#P1234"
                minLength: 3
                maxLength: 16
              photoOwner:
                description: Unique user identifier.
                type: string
                pattern: '^.*?$'
                example: "#U1234"
                minLength: 3
                maxLength: 16
              photoOwnerUsername:
                description: User username.
                type: string
                pattern: '^.*?$'
                example: bea
                minLength: 3
                maxLength: 16
              username:
                description: User username.
                type: string
                pattern: '^.*?$'
                example: bea
                minLength: 3
                maxLength: 16
              content:
                description: Content of the comment.
                type: string
                pattern: '^.*?$'
                example: "Hello World!"
                minLength: 2
                maxLength: 30
    
    like:
      title: Like 
      description: Like schema.
      type: object
      properties:
        likeId:
          description: likeID schema.
          type: string
          pattern: '^.*?$'
          example: "#L1234"
          minLength: 3
          maxLength: 16
        userId:
          description: Unique user identifier.
          type: string
          pattern: '^.*?$'
          example: "#U5678" 
          minLength: 3
          maxLength: 16
        photoId: 
          description:  Unique photo identifier.
          type: string
          pattern: '^.*?$'
          example: "#P1234"
          minLength: 3
          maxLength: 16
        photoOwner:
          description: Unique user identifier.
          type: string
          pattern: '^.*?$'
          example: "#U1234"
          minLength: 3
          maxLength: 16
    
    photosList: 
      title: Photos
      description: Photos schema.
      type: object
      properties:
        requestId:
          description: Unique user identifier.
          type: string
          pattern: '^.*?$'
          example: "#U1234" 
          minLength: 3
          maxLength: 16
        identifier:
          description: Unique user identifier.
          type: string
          pattern: '^.*?$'
          example: "#U1234" 
          minLength: 3
          maxLength: 16
        photos: 
          description: list of objects (each object is a photo)
          type: array
          minItems: 0
          maxItems: 99999
          items:
            type: object
            properties:
              Id: 
                description:  Unique photo identifier.
                type: string
                pattern: '^.*?$'
                example: "#P1234"
                minLength: 3
                maxLength: 16
              userId:
                description: Unique user identifier.
                type: string
                pattern: '^.*?$'
                example: "#U5678" 
                minLength: 3
                maxLength: 16
              file: 
                description: file
                type: string
                format: binary
                minLength: 3
                maxLength: 16
              date:
                description: Registration date.
                type: string
                format: date-time
                example: "2022-11-02T09:00:00Z"
                minLength: 3
                maxLength: 9999
              likeCount:
                description: photo likes count.
                type: integer
                example: 0
                minimum: 0
                maximum: 9999
              commentCount:
                description: photo comments count.
                type: integer
                example: 0
                minimum: 0
                maximum: 9999
              likeStatus:
                description: photo like status.
                type: boolean
                example: true
    
    stream: 
      title: Stream
      description: Stream schema.
      type: object
      properties:
        identifier:
          description: Unique user identifier.
          type: string
          pattern: '^.*?$'
          example: "#U1234" 
          minLength: 3
          maxLength: 16
        photos: 
          description: list of objects (each object is a photo)
          type: array
          minItems: 0
          maxItems: 99999
          items:
            type: object
            properties:
              Id: 
                description:  Unique photo identifier.
                type: string
                pattern: '^.*?$'
                example: "#P1234"
                minLength: 3
                maxLength: 16
              userId:
                description: Unique user identifier.
                type: string
                pattern: '^.*?$'
                example: "#U5678" 
                minLength: 3
                maxLength: 16
              username:
                description: User username.
                type: string
                pattern: '^.*?$'
                example: bea
                minLength: 3
                maxLength: 16
              file: 
                description: file
                type: string
                format: binary
                minLength: 3
                maxLength: 16
              date:
                description: Registration date.
                type: string
                format: date-time
                example: "2022-11-02T09:00:00Z"
                minLength: 3
                maxLength: 9999
              likeCount:
                description: photo likes count.
                type: integer
                example: 0
                minimum: 0
                maximum: 9999
              commentCount:
                description: photo comments count.
                type: integer
                example: 0
                minimum: 0
                maximum: 9999
              likeStatus:
                description: photo like status.
                type: boolean
                example: true
  
    login:        
      title: Login
      description: Login schema.
      type: object
      properties:
        username:
          description: user
          type: string
          example: bea
          pattern: '^.*?$'
          minLength: 3
          maxLength: 16
 
    photo:
      title: Photo
      description: photo schema.
      properties:
        Id: 
          description:  Unique photo identifier.
          type: string
          pattern: '^.*?$'
          example: "#P1234"
          minLength: 3
          maxLength: 16
        userId:
          description: Unique user identifier.
          type: string
          pattern: '^.*?$'
          example: "#U5678" 
          minLength: 3
          maxLength: 16
        file: 
            description: file
            type: string
            format: binary
            minLength: 1
            maxLength: 9999
        date:
          description: Registration date.
          type: string
          format: date-time
          example: "2022-11-02T09:00:00Z"
          minLength: 3
          maxLength: 9999
        likeCount:
          description: photo likes count.
          type: integer
          example: 0
          minimum: 0
          maximum: 9999
        commentCount:
          description: photo comments count.
          type: integer
          example: 0
          minimum: 0
          maximum: 9999
        likeStatus:
          description: photo like status.
          type: boolean
          example: true      
  
    comment:
      title: Comment
      type: object
      description: comment schema.
      properties:
        content:
          description: content
          type: string
          example: Hello World!
          pattern: '^.*?$'
          minLength: 1
          maxLength: 40  

   